#!/bin/bash
baseDir='~/bar'
targetDir='/var/www/bar.com'

scriptName="$(basename $0)"
scriptPath="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"

# GET PATH OF SCRIPT, EVEN IF IS SYMLINK
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

bold=$(tput bold)
normal=$(tput sgr0)

# CLEAR PREVIOUS CONSOLE OUTPUT
printf "\033c"
# HEADER INFO
echo ">> ${bold}${scriptName^^}${normal} >>"
echo "-----------------------------------------------------"
echo "$baseDir/$1"

#
# HELP INFO
#

if [[ $1 == "--help" ]];
then
  echo "Valid cmd examples:"
  echo "$ ${bold}$scriptName index.html${normal}   will push -f arg to main -d"
  echo "$ ${bold}$scriptName css${normal}   will push -r -d arg to -d arg"
  echo "$ ${bold}$scriptName css/main.css css${normal}   will push -f arg to -d arg"
  echo "$ ${bold}$scriptName --files${normal}   will push /* to main -d"
  echo "$ ${bold}$scriptName --all${normal}   will push /* -r to main -d"

#
# SETUP FOR PATHING
#

elif [[ $1 == "--setup" ]];
then

	# LOG INPUTS TO VARS
	read -p "Enter base directory (ex: ${bold}~/example${normal}): " inputFirst
	sed -i '2s,.*,baseDir=\x27'"$inputFirst"'\x27,g' "$scriptName"

	read -p "Enter target directory path (ex: ${bold}/var/www/example.com${normal}): " inputSecond
	sed -i '3s,.*,targetDir=\x27'"$inputSecond"'\x27,g' "$scriptName"
	
	# PRINT OUT INFO & SETUP
	echo "-----------------------------------------------------"
	echo "- Creating/updating symlink from ${bold}$DIR/$scriptName${normal} to ${bold}/bin/$scriptName${normal}"
	sudo ln -sf $DIR/$scriptName /bin/pshit

	echo "-----------------------------------------------------"
	echo "You are now set up to ${bold}pshit${normal} from: ${bold}$inputFirst${normal} > ${bold}$inputSecond${normal}"
	echo "-----------------------------------------------------"
	echo "Change anytime by running:"
	echo "$ ${bold}pshit --setup${normal}"
	echo "Printout sample commands with:"
	echo "$ ${bold}pshit --help${normal}"

#
# KEYWORD ARGUMENTS
#

# PUSH ALL
elif [[ $1 == "--all" ]];
then

  sudo cp $baseDir/* -r $targetDir/
  echo "Pushing ${bold}$baseDir/* -r${normal} to ${bold}$targetDir/${normal}"

# PUSH FILES IN MAIN DIR
elif [[ $1 == "--files" ]];
then

  sudo cp $baseDir/* $targetDir/
  echo "Pushing ${bold}$baseDir/*${normal} to ${bold}$targetDir/${normal}";

# $1 FILE ARGUMENT, EX: $scriptName scripts/main.js [...]
elif [[ -f $baseDir/$1 ]];
then

  # $2 NO SERVER DIR ARG, EX: $scriptName scripts/main.js
  if [[ -z $2 ]];
  then

    read -p "Push ${bold}$baseDir/$1${normal} to ${bold}$targetDir/${normal}? ${bold}y/n${normal}: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then

      sudo cp $baseDir/$1 $targetDir/
      echo "Success! ${bold}$1${normal} has been updated."

    fi

  # $2 SERVER DIR ARG, EX: $scriptName scripts/main.js scripts
  elif [[ -d $baseDir/$2 ]];
  then

    sudo cp $baseDir/$1 $targetDir/$2/
    echo "Pushing ${bold}$baseDir/$1${normal} to ${bold}$targetDir/$2/${normal}"

  fi

# $1 DIR ARGUMENT, EX: scripts
elif [[ -d $baseDir/$1 && -z $2 ]];
then

  read -p "Push ${bold}$baseDir/$1${normal} to ${bold}$targetDir/${normal}? ${bold}y/n${normal}: " -n 1 -r
  echo

  if [[ $REPLY =~ ^[Yy]$ ]]
  then

    sudo cp $baseDir/$1/* -r $targetDir/$1/
    echo "Success! ${bold}$1/${normal} has been updated."

  fi

# ERROR, NO ARGUMENT
else

  echo "No argument. For more info use $ ${bold}$scriptName --help${normal}"

fi

echo ""

